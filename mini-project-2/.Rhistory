scale_y_log10("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre)) +
scale_y_log10("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=50) +
scale_y_log10("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=100) +
scale_y_log10("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre)) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=100) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre)) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, fill=selected_genre), bins=80) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot(genre_filtered_steam_games) +
geom_histogram(aes(x=original_price, after_stat(density), fill=selected_genre), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50) +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50) +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="green"), bins=50) +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="purple"), bins=50) +
geom_histogram(genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="blue"), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="green"), bins=50) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="purple"), bins=50) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="blue"), bins=50) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="green"), bins=50) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="purple"), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="blue"), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="blue"), bins=50) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="red"), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="green"), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="blue"), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="red"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="green"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill="blue"), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="red"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="green"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="red"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="green"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="green"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="red"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), fill="green"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), fill="red"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), color="green"), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), color="red"), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density), color="green"), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density), color="red"), bins=30) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)),color="blue", bins=30, col) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), color="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), fill="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green" bins=30) +
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density)), fill="blue", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density)), color="green", bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density)), color="red", bins=30) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=30) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=30) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=30, alpha=1) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=30, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=30, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=1) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=0.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences") +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level")
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Count of Occurrences", labels=scales::number_format()) +
ggtitle("Boxplot that shows Count of Occurrences for each price level") +
scale_x_log10("Price Level (Scaled: log10)", labels=scales::number_format())
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Density of Occurrences", labels=scales::number_format()) +
ggtitle("Boxplot that shows Density of Occurrences for Original Prices") +
scale_x_log10("Original Price (Scaled: log10)", labels=scales::number_format())
langs <- steam_games %>% pull(var="languages")
head(langs)
steam_games %>% filter(str_extract(pattern="((\\w)|(\\-))+,|English", string=gsub(" ", "", languages)) == "English" |str_extract(pattern="((\\w)|(\\-))+,|English", string=gsub(" ", "", languages)) == "English,") %>% summarise(English_cnt=n()) # the games that have English as their first language
steam_games %>% filter(!is.na(languages)) %>% summarise(no_na_cnt=n()) # the games that do not have na in their languages column
# following lines first tries to extract the 2nd language. If there is no second language, it extracts the first one which is English
selected_language_steam_games <- added_augmented_steam_games %>% filter(!is.na(languages)) %>% mutate(selected_language=gsub(",", "", str_extract(pattern="(,((\\w)|(\\-))+,)", string=gsub(" ", "", languages))))
selected_language_steam_games <- selected_language_steam_games %>% mutate(selected_language=case_when(is.na(selected_language) ~ gsub(",", "", str_extract(pattern=",((\\w)|(\\-))+", string=gsub(" ", "", languages))), TRUE ~ selected_language ) )
selected_language_steam_games <- selected_language_steam_games %>% mutate(selected_language=case_when(is.na(selected_language) ~ gsub(",", "", str_extract(pattern="((\\w)|(\\-))+", string=gsub(" ", "", languages))), TRUE ~ selected_language ) )
languages <- selected_language_steam_games %>% pull(var="selected_language")
head(languages)
selected_language_steam_games %>% group_by(selected_language, review_type) %>% summarise(n=n())
#cnts <- as.tibble(selected_language_steam_games %>% group_by(selected_language) %>% summarise(n=n()))
#in_joined <- inner_join(selected_language_steam_games, cnts,by="selected_language")
ggplot(selected_language_steam_games%>%mutate(score=score+0.1)) + # added 0.1 to avoid log10 divergence
geom_violin(aes(x=selected_language, y=score)) +
geom_bar(aes(selected_language), alpha=0.2) +
scale_y_log10("Review Scores and Count of Occurences (Scaled log10)") +
ggtitle("Review scores and count of occurrences for each language group ") +
xlab("Language") +
coord_flip()
# warnings are for language groups which do not contain enough values to form the violing graph, it is okay they are negligible since they are only 2 rows, 6 in tota
```{r}
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(unlist(strsplit(genre, ",")),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
sample(unlist(strsplit("berke,johnathan,birol,lab", ",")),1)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=unlist(strsplit(genre, ",")))
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=unlist(strsplit(genre, ",")))
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=genre)
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=(strsplit(genre, ",")))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(strsplit(genre, ","),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
ggplot(added_augmented_steam_games) +
geom_boxplot(aes(x=price_level,y=score, color=price_level)) +
geom_jitter(aes(x=price_level, y=score, color=price_level), size=0.01, alpha=0.2)+
scale_y_continuous("Review Scores") +
ggtitle("Boxplot that shows review scores for each price level ") +
xlab("Price Level")
# I use the corresponding price quantile values to split the price categories to 'very cheap', 'cheap', 'reasonable', 'pricy', 'very pricy' respectively
added_review_augmented_steam_games <- added_review_augmented_steam_games_original %>% filter(!is.na(original_price)) %>% mutate(price_level = factor(case_when(original_price < 2 ~ "very cheap",
original_price < 5 ~ "cheap",
original_price < 10 ~ "reasonable",
original_price < 40 ~ "pricy",
TRUE ~ "very pricy"),
levels = c('very cheap', 'cheap', 'reasonable', 'pricy', 'very pricy')))
# just for visualization purposes
added_review_augmented_steam_games %>% group_by(price_level) %>% summarise(n=n())
added_augmented_steam_games <- added_review_augmented_steam_games %>% mutate(score=as.integer(gsub("%", "", str_extract(pattern="\\d+%", string=all_reviews)))) # extract the score information from the all_reviews column
ggplot(added_augmented_steam_games) +
geom_boxplot(aes(x=price_level,y=score, color=price_level)) +
geom_jitter(aes(x=price_level, y=score, color=price_level), size=0.01, alpha=0.2)+
scale_y_continuous("Review Scores") +
ggtitle("Boxplot that shows review scores for each price level ") +
xlab("Price Level")
ggplot(added_augmented_steam_games%>%filter(!is.na(score))) +
geom_boxplot(aes(x=price_level,y=score, color=price_level)) +
geom_jitter(aes(x=price_level, y=score, color=price_level), size=0.01, alpha=0.2)+
scale_y_continuous("Review Scores") +
ggtitle("Boxplot that shows review scores for each price level ") +
xlab("Price Level")
is_tidy <- steam_games %>% select(genre, languages, all_reviews, recent_reviews, recommended_requirements, minimum_requirements, game_details, popular_tags)
glimpse(is_tidy)
concise_steam_games <- review_cnt_score %>% select(id, review_score, review_cnt, orginal_price)
review_cnt_steam_games <- steam_games %>% mutate(review_cnt=as.integer(gsub(",", "",str_extract(pattern="(\\d+,\\d+)|(\\d+)", string=all_reviews )))) # extracting the all review count of a game
review_cnt_score <- review_cnt_steam_games %>% mutate(review_score=as.integer(gsub("%", "", str_extract(pattern="\\d+%", string=all_reviews)))) # extract the score information from the all_reviews column
concise_steam_games <- review_cnt_score %>% select(id, review_score, review_cnt, orginal_price)
concise_steam_games <- review_cnt_score %>% select(id, review_score, review_cnt, original_price)
base_consice_games <- concise_steam_games %>% filter(is.na(original_price))
first_games <- base_consice_games %>% filter(is.numeric(review_cnt) & !is.na(review_cnt))
second_games <- base_consice_games %>% filter(is.numeric(review_score) & !is.na(review_score))
first_games <- first_games %>% select(!review_score)
second_games <- second_games %>% select(!review_cnt)
first_games <- first_games %>% mutate(review_cnt=review_cnt+0.001, original_price=original_price+0.001)
second_games <- second_games %>% mutate(review_score=review_score+0.001, original_price=original_price+0.001)
glimpse(first_games)
glimpse(second_games)
joined_games <- outer_join(first_games, second_games, "id")
glimpse(first_games)
glimpse(second_games)
(full_outer_joined_games <- full_join(first_games, second_games, "id"))
(inner_joined_games <- inner_join(first_games, second_games, "id"))
base_consice_games <- concise_steam_games %>% filter(!is.na(original_price))
first_games <- base_consice_games %>% filter(is.numeric(review_cnt) & !is.na(review_cnt))
second_games <- base_consice_games %>% filter(is.numeric(review_score) & !is.na(review_score))
first_games <- first_games %>% select(!review_score)
second_games <- second_games %>% select(!review_cnt)
first_games <- first_games %>% mutate(review_cnt=review_cnt+0.001, original_price=original_price+0.001)
second_games <- second_games %>% mutate(review_score=review_score+0.001, original_price=original_price+0.001)
glimpse(first_games)
glimpse(second_games)
(full_outer_joined_games <- full_join(first_games, second_games, "id"))
(inner_joined_games <- inner_join(first_games, second_games, "id"))
glimpse(first_games)
glimpse(second_games)
(full_outer_joined_games <- full_join(first_games, second_games, "id"))
(inner_joined_games <- inner_join(first_games, second_games, "id"))
glimpse(first_games)
glimpse(second_games)
glimpse(full_outer_joined_games <- full_join(first_games, second_games, "id"))
glimpse(inner_joined_games <- inner_join(first_games, second_games, "id"))
glimpse(first_games)
glimpse(second_games)
glimpse(full_outer_joined_games <- full_join(first_games, second_games, join_by("id", "original_price")))
glimpse(inner_joined_games <- inner_join(first_games, second_games, "id"))
glimpse(first_games)
glimpse(second_games)
glimpse(full_outer_joined_games <- full_join(first_games, second_games, join_by("id", "original_price")))
glimpse(inner_joined_games <- inner_join(first_games, second_games, join_by("id", "original_price")))
model_output <- glm(original_price ~ review_score, second_games)
model_output <- lm(original_price ~ review_score, second_games)
model_output <- lm(original_price ~ review_score, second_games)
print(model_output)
tidy(model_output)
model_output <- lm(original_price ~ review_score, second_games)
print(model_output)
glance(model_output)
model_output <- lm(original_price ~ review_score, second_games)
print(model_output)
library(broom)
library(broom)
library(broom) # necessary to use broom, no declaration has been done before for this file
augment(model_output)
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(revirew_score, original_price, .fitted)
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(revirew_score, original_price, ".fitted")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, ".fitted")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) %>%
geom_jitter(aes(review_score, original_price)) +
geom_smooth(method="lm", aes(x=review_score, y=original_price))
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price)) +
geom_smooth(method="lm", aes(x=review_score, y=original_price))
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price)) +
geom_smooth(method="lm", aes(x=review_score, y=original_price)) +
scale_y_log10("Original Price (Scaled: log10)", labels=scale::number_format()) +
scale_x_continuous("Review Score")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price)) +
geom_smooth(method="lm", aes(x=review_score, y=original_price)) +
scale_y_log10("Original Price (Scaled: log10)", labels=scales::number_format()) +
scale_x_continuous("Review Score")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price), size=0.5) +
geom_smooth(method="lm", aes(x=review_score, y=original_price)) +
scale_y_log10("Original Price (Scaled: log10)", labels=scales::number_format()) +
scale_x_continuous("Review Score")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price), size=0.5) +
geom_smooth(method="lm", aes(x=review_score, y=original_price)) +
scale_y_log10("Original Price (Scaled: log10)", labels=scales::number_format()) +
scale_x_continuous("Review Score") +
title("Game Price vs Review Score")
library(broom) # necessary to use broom, no declaration has been done before for this file
(preds<-augment(model_output))
preds %>% select(review_score, original_price, .fitted)
ggplot(second_games) +
geom_jitter(aes(review_score, original_price), size=0.5) +
geom_smooth(method="lm", aes(x=review_score, y=original_price)) +
scale_y_log10("Original Price (Scaled: log10)", labels=scales::number_format()) +
scale_x_continuous("Review Score") +
ggtitle("Game Price vs Review Score")
(q_4_1_output <- review_augmented_steam_games %>%
group_by(review_type) %>%
summarise(mean_price=mean(original_price, na.rm=TRUE), range_price=max(original_price, na.rm=TRUE)-min(original_price, na.rm=TRUE), median_price=median(original_price, na.rm=TRUE), standard_deviation_price=sd(original_price, na.rm=TRUE), n=n()))
write_csv(q_4_1_output, here::here("output", "output_q33.csv"))
install.packages("here")
library(here)
write_csv(q_4_1_output, here::here("output", "output_q33.csv"))
library(here) # first time using here, need declaration
write_csv(q_4_1_output, here::here("output", "output_q33.csv")) # since I use here, it automatically starts from the top-level of my current project, it should work even if I change the directories or rmd file's location
saveRDS(model_output, here::here("output", "output_q32.rds"))
