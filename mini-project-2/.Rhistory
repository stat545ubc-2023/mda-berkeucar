install.packages("here")
library(here)
write_csv(q_4_1_output, here::here("output", "output_q33.csv"))
library(here) # first time using here, need declaration
write_csv(q_4_1_output, here::here("output", "output_q33.csv")) # since I use here, it automatically starts from the top-level of my current project, it should work even if I change the directories or rmd file's location
saveRDS(model_output, here::here("output", "output_q32.rds"))
is_tidy <- steam_games %>% select(id, url, types, name, original_price, genre, all_reviews, recommended_requirements )
library(datateachr) # <- might contain the data you picked!
library(tidyverse)
is_tidy <- steam_games %>% select(id, url, types, name, original_price, genre, all_reviews, recommended_requirements )
glimpse(is_tidy)
is_tidy <- steam_games %>% select(id, url, types, name, original_price, genre, all_reviews, recommended_requirements )
is_tidy
non_na_dataset <- is_tidy %>% filter(!is.na(id:recommended_requirements) & id:recommended_requirements != "NaN")
non_na_dataset <- is_tidy %>% filter(!is.na(id:recommended_requirements) & c(id:recommended_requirements) != "NaN")
non_na_dataset <- is_tidy %>% filter(!is.na(id:recommended_requirements) )
non_na_dataset <- is_tidy %>% filter(!is.na(everything()) )
non_na_dataset <- is_tidy %>% filter(!is.na(selec(everything())) )
non_na_dataset <- is_tidy %>% filter(!is.na(select(everything())) )
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
glimpse(non_na_dataset)
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset %>% select(recommended_requirements)
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset %>% select(recommended_requirements)[1]
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset %>% select(recommended_requirements)
separated_dataset <- non_na_dataset %>% separate_wider_regex(col=recommended_requirements, into=c("OS","Memory","Graphics", "Storages", "Additional Notes"), patterns=",\\w*:,")
review_cnt_steam_games <- steam_games %>% mutate(review_cnt=as.integer(gsub(",", "",str_extract(pattern="(\\d+,\\d+)|(\\d+)", string=all_reviews )))) # extracting the all review count of a game
review_augmented_steam_games <- review_cnt_steam_games %>% mutate(review_type=factor(gsub(",", "", str_extract(pattern="(\\w+,)|(\\w+ \\w+,)", string=all_reviews)))) # extracting the review type/average of a game (negative, positive etc.)
# I need to change the occurrences of "user reviews" which are the result of a game having less than 10 reviews which are not eligable for categorization of the review style. I rename these as "Under 10 reviews".
review_augmented_steam_games <- review_augmented_steam_games %>% mutate(review_type=factor(case_when(review_type == "user reviews" ~ "Under 10 reviews", TRUE ~ review_type)))
(q_4_1_output <- review_augmented_steam_games %>%
group_by(review_type) %>%
summarise(mean_price=mean(original_price, na.rm=TRUE), range_price=max(original_price, na.rm=TRUE)-min(original_price, na.rm=TRUE), median_price=median(original_price, na.rm=TRUE), standard_deviation_price=sd(original_price, na.rm=TRUE), n=n()))
added_review_augmented_steam_games <- review_augmented_steam_games %>% filter(review_type!="Under 10 reviews" & !is.na(review_type) & !is.na(original_price)) %>% mutate(original_price=original_price+.01)
ggplot(added_review_augmented_steam_games) +
geom_jitter(aes(x=original_price, y=review_cnt, colour=review_type), alpha=1, size=0.9 ) +
#geom_smooth(method="lm", aes(x=original_price, y=review_cnt)) + # uncomment this line to see that there is no linear correlation between these two variables
scale_y_log10("Review Count (Scaled: log10)", labels=scales::number_format() )+
scale_x_log10("Original Price in dollars (Scaled: log10)", labels=scales::dollar_format()) +
ggtitle("Jitter plot that shows original price vs review count")
added_review_augmented_steam_games_original<-review_augmented_steam_games %>% mutate(original_price=original_price+.01) # just to restore the na and under 10 reviews back
added_review_augmented_steam_games_original %>% reframe(percentile=c(0.05, 0.25, 0.5, 0.75, 0.95), original_price=quantile(original_price, c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm=TRUE)) # this shows the 0.1, 0.25, 0.5, 0.75, 0.9 th quantiles for the original prices of the games
# I use the corresponding price quantile values to split the price categories to 'very cheap', 'cheap', 'reasonable', 'pricy', 'very pricy' respectively
added_review_augmented_steam_games <- added_review_augmented_steam_games_original %>% filter(!is.na(original_price)) %>%
mutate(price_level = factor(case_when(original_price < 2 ~ "very cheap",
original_price < 5 ~ "cheap",
original_price < 10 ~ "reasonable",
original_price < 40 ~ "pricy",
TRUE ~ "very pricy"),
levels = c('very cheap', 'cheap', 'reasonable', 'pricy', 'very pricy')))
# just for visualization purposes
added_review_augmented_steam_games %>% group_by(price_level) %>% summarise(n=n())
added_augmented_steam_games <- added_review_augmented_steam_games %>% mutate(score=as.integer(gsub("%", "", str_extract(pattern="\\d+%", string=all_reviews)))) # extract the score information from the all_reviews column
ggplot(added_augmented_steam_games%>%filter(!is.na(score))) +
geom_boxplot(aes(x=price_level,y=score, color=price_level)) +
geom_jitter(aes(x=price_level, y=score, color=price_level), size=0.01, alpha=0.2)+
scale_y_continuous("Review Scores") +
ggtitle("Boxplot that shows review scores for each price level ") +
xlab("Price Level")
genres <- added_augmented_steam_games %>% pull(var="genre")
head(genres)
genre_filtered_steam_games <-  added_augmented_steam_games %>% filter(!is.na(genre)) %>%
mutate(selected_genre = factor(case_when(grepl("Strategy", genre) ~ "Strategy",
grepl("Adventure", genre) ~ "Adventure",
grepl("Action", genre) ~ "Action",
TRUE ~ "NA"),
levels = c( 'Strategy', 'Adventure', 'Action', "NA"))) %>%
filter(selected_genre != "NA") # throw out all the other genres
tail(genre_filtered_steam_games %>% pull(var="selected_genre"))
genre_augmented_steam_games <- added_augmented_steam_games %>% mutate(selected_genre=sample(strsplit(genre, ","),1))
selected_genres <- genre_augmented_steam_games %>% pull(var="selected_genre")
head(selected_genres)
(histogram_data <- as.tibble(genre_filtered_steam_games %>% group_by(selected_genre, price_level) %>% summarise(n=n())))
ggplot() +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Action"), aes(x=original_price, after_stat(density), fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Strategy"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
geom_histogram(data=genre_filtered_steam_games%>%filter(selected_genre=="Adventure"), aes(x=original_price, after_stat(density),fill=selected_genre), bins=50, alpha=.5) +
scale_y_continuous("Density of Occurrences", labels=scales::number_format()) +
ggtitle("Boxplot that shows Density of Occurrences for Original Prices") +
scale_x_log10("Original Price (Scaled: log10)", labels=scales::number_format())
langs <- steam_games %>% pull(var="languages")
head(langs)
steam_games %>% filter(str_extract(pattern="((\\w)|(\\-))+,|English", string=gsub(" ", "", languages)) == "English" |str_extract(pattern="((\\w)|(\\-))+,|English", string=gsub(" ", "", languages)) == "English,") %>% summarise(English_cnt=n()) # the games that have English as their first language
steam_games %>% filter(!is.na(languages)) %>% summarise(no_na_cnt=n()) # the games that do not have na in their languages column
# following lines first tries to extract the 2nd language. If there is no second language, it extracts the first one which is English
# the expression I am looking for is not regular and needs precedence. Thus, I am using seperate calls. Here, I first try to extract 2nd language from language column cells which has more than 2 languages
selected_language_steam_games <- added_augmented_steam_games %>% filter(!is.na(languages)) %>% mutate(selected_language=gsub(",", "", str_extract(pattern="(,((\\w)|(\\-))+,)", string=gsub(" ", "", languages))))
# second I try to extract the second language from the cells that only have 2 languages
selected_language_steam_games <- selected_language_steam_games %>% mutate(selected_language=case_when(is.na(selected_language) ~ gsub(",", "", str_extract(pattern=",((\\w)|(\\-))+", string=gsub(" ", "", languages))), TRUE ~ selected_language ) )
# and I extract the language from cells that only have 1 language and that language is English
selected_language_steam_games <- selected_language_steam_games %>% mutate(selected_language=case_when(is.na(selected_language) ~ gsub(",", "", str_extract(pattern="((\\w)|(\\-))+", string=gsub(" ", "", languages))), TRUE ~ selected_language ) )
languages <- selected_language_steam_games %>% pull(var="selected_language")
head(languages)
selected_language_steam_games %>% group_by(selected_language, review_type) %>% summarise(n=n())
ggplot(selected_language_steam_games%>%mutate(score=score+0.1)) + # added 0.1 to avoid log10 divergence
geom_violin(aes(x=selected_language, y=score)) +
geom_bar(aes(selected_language), alpha=0.2) +
scale_y_log10("Review Scores and Count of Occurences (Scaled log10)") +
ggtitle("Review scores and count of occurrences for each language group ") +
xlab("Language") +
coord_flip()
# warnings are for language groups which do not contain enough values to form the violing graph, it is okay they are negligible since they are only 2 rows, 6 in tota
selected_language_set <- selected_language_steam_games %>% mutate(score=score+0.1)
ggplot(selected_language_set) + # added 0.1 to avoid log10 divergence
geom_violin(aes(x=selected_language, y=score)) +
geom_bar(aes(selected_language), alpha=0.2) +
scale_y_log10("Review Scores and Count of Occurences (Scaled log10)") +
ggtitle("Review scores and count of occurrences for each language group ") +
xlab("Language") +
coord_flip()
# warnings are for language groups which do not contain enough values to form the violing graph, it is okay they are negligible since they are only 2 rows, 6 in tota
selected_language_set <- selected_language_steam_games %>% mutate(score=score+0.1) # added 0.1 to avoid log10 divergence
ggplot(selected_language_set) +
geom_violin(aes(x=selected_language, y=score)) +
geom_bar(aes(selected_language), alpha=0.2) +
scale_y_log10("Review Scores and Count of Occurences (Scaled log10)", labels = scales::number_format()) +
ggtitle("Review scores and count of occurrences for each language group ") +
xlab("Language") +
coord_flip()
# warnings are for language groups which do not contain enough values to form the violing graph, it is okay they are negligible since they are only 2 rows, 6 in tota
selected_language_set <- selected_language_steam_games %>% mutate(score=score+0.1) %>% filter(!is.na(score))# added 0.1 to avoid log10 divergence
ggplot(selected_language_set) +
geom_violin(aes(x=selected_language, y=score)) +
geom_bar(aes(selected_language), alpha=0.2) +
scale_y_log10("Review Scores and Count of Occurences (Scaled log10)", labels = scales::number_format()) +
ggtitle("Review scores and count of occurrences for each language group ") +
xlab("Language") +
coord_flip()
# warnings are for language groups which do not contain enough values to form the violing graph, it is okay they are negligible since they are only 2 rows, 6 in tota
is_tidy <- steam_games %>% select(id, url, types, name, achievements, original_price, genre, all_reviews)
glimpse(is_tidy)
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, recommended_requirements), ~ !is.na(.)))
non_na_dataset <- is_tidy %>% filter(if_all(c(id, url, types, name, original_price, genre, all_reviews, achievements), ~ !is.na(.)))
glimpse(non_na_dataset)
separated_dataset <- non_na_dataset %>% separate_wider_regex(col=recommended_requirements, patterns=c(OS=",OS:,"))
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c(""), delim = c(",(","),","-", "%"), names = c("review_type", "review_cnt", "review_score", "other"))
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c(""), delim = ",(", names = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c(""), delim = ",(", names = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), delim = ",(", names = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(cols="all_reviews", delim = ",(", into = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, delim = ",(", into = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(all_reviews, ",(", into = c("review_type", "other"))
wider_set <- non_na_dataset %>% separate_wider_delim(all_reviews, ",(", c("review_type", "other"))
wider_set <- non_na_dataset %>% separate_wider_delim(all_reviews, "\\w+),", c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(all_reviews, "\\w+),", c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, "\\w+),", c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, "\\w+),",into= c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, "\w+),",into= c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, "[a-Z]+),",into= c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews, sep="),",into= c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews,into= c("review_type", "other"))
wider_set <- non_na_dataset %>% separate(col=all_reviews,into= c("review_type", "other"))
wider_set
(histogram_data <- as.tibble(genre_filtered_steam_games %>% group_by(selected_genre, price_level) %>% summarise(n=n())))
wider_set <- non_na_dataset %>% separate(cols=c("all_reviews"), into= c("review_type", "other"), delim="),")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), into= c("review_type", "other"), delim="),")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), into= c("review_type"), delim="),")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim="),")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim="),", too_few="debug")
wider_set
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(", too_few="debug")
wider_set
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), delim=",(")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(", too_few = "debug")
wider_set
wider_set <- non_na_dataset %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(", too_few = "debug")
wider_set %>% select(review_type, other)
wider_set <- non_na_dataset %>% filter(grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
wider_set <- non_na_dataset %>% filter(grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
wider_set <- non_na_dataset %>% filter(grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(", too_few = "debug")
wider_set %>% select(review_type, other)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
wider_set %>% select(review_type, other)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".*,("))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".*,\("))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*"))
wider_set %>% select(review_type, other)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt="(.*)"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt="(?*)"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt="\\(?*\\)"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt="[0-9]*"))
wider_set %>% select(review_type, other)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt="[0-9]*"))
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*,", review_cnt="[0-9]*"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*,", review_cnt="[0-9]*"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*,", review_cnt="[0-9]*"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0-9]*"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="\\d*"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",\\d*"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="- \\d+%"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="- \\d+\%"), too_few="debug")
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="- \\d+%"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="%"), too_few="debug")
wider_set_big %>% select(review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="%"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="- \\d+%"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="- [0-9]*%"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="\([0-9]*\)"), too_few="debug")
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="([0-9])"), too_few="debug")
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="(?:[0-9])"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0-9]*,*[0-9]*"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0-9]+,*[0-9]+"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",(.*),"), too_few="debug")
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"), too_few="debug")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type=".* *.*", review_cnt=",.*,-"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"))
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"), too_few="start")
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"), too_few="align_start")
wider_set_big %>% select(all_reviews, review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-"), too_few="align_start")
wider_set_big %>% select( review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set_big %>% select( review_type, review_cnt)
wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set_big %>% select( review_type, review_cnt, review_score)
#wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="(.*)", review_score =".*%"), too_few="align_start")
#wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="\\(.*\\)", review_score =".*%"), too_few="align_start")
a<-",.*,-"
wider_set_big %>% select( review_type, review_cnt, review_score)
#wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set_big %>% select( review_type, review_cnt, review_score)
#wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set_small <- non_na_dataset %>% filter(grepl("Need more user reviews to generate a score", all_reviews))
wider_set_small
wider_set_small %>% select( review_type, review_cnt, review_score)
#wider_set_bigger_10 <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews)) %>% separate_wider_delim(cols=c("all_reviews"), names= c("review_type", "other"), delim=",(")
#wider_set_bigger_10 <- wider_set_bigger_10 %>% separate_wider_delim(cols=c("other"), names= c("other2", "other"), delim="),")
wider_set_big <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set_small <- non_na_dataset %>% filter(grepl("Need more user reviews to generate a score", all_reviews))
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0-9]*,*[0-9],", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]*,*[0123456789],", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="\[0123456789\]*,*[0123456789],", review_score =".*%"), too_few="align_start")
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="\\[0123456789\\]*,*[0123456789],", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]*,*[0123456789],", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+,*[0123456789]+,", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+,*[0123456789]*,", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+,*[0123456789]*", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+.*[0123456789]*", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+.*[0123456789]*", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt="[0123456789]+,*[0123456789]*", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
#wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=" [0123456789]+,*[0123456789]* ", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string
#wider_set <- wider_set %>% mutate(review_count)
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
#wider_set <- wider_set %>% mutate(review_count=review_cnt)
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub("%", "", review_score), review_cnt=gsub(",","", gsub(")","", gsub("(","",review_cnt))))
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub("%", "", review_score), review_cnt=gsub(",","", gsub(")","", gsub("(","",review_cnt))))
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub("%", "", review_score), review_cnt=gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub("%", "", review_score), review_cnt=gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub("%", "", review_score), review_cnt=gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt)))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub(" ", "", gsub("%", "", review_score)), review_cnt=gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt)))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=as.integer(gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt))))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=as.double(gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt))))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=gsub("-", "", gsub(",","", gsub("\\)","", gsub("\\(","",review_cnt)))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=gsub("-", "", gsub("\\)","", gsub("\\(","",review_cnt))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=gsub("-", "",  gsub("\\)","", gsub("\\(","",review_cnt))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=gsub(",", "", gsub("-", "",  gsub("\\)","", gsub("\\(","",review_cnt)))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=as.double(gsub(",", "", gsub("-", "",  gsub("\\)","", gsub("\\(","",review_cnt))))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=as.integer(gsub(" ", "", gsub("%", "", review_score))), review_cnt=as.numeric(gsub(",", "", gsub("-", "",  gsub("\\)","", gsub("\\(","",review_cnt))))))
glimpse(wider_set)
wider_set <- non_na_dataset %>% filter(!grepl("Need more user reviews to generate a score", all_reviews) & !is.na(all_reviews)) %>% separate_wider_regex(all_reviews, c(review_type="[a-zA-z]* *[a-zA-z]*", review_cnt=",.*,-", review_score =".*%"), too_few="align_start")
# the function did separate them but I still need to polish them since the separator letters are still in the cropped string (I do not know why it does not accept numerical chars but it does not !If it did there would no need for polishing)
wider_set <- wider_set %>% mutate(review_score=gsub(" ", "", gsub("%", "", review_score)), review_cnt=gsub(",", "", gsub("-", "",  gsub("\\)","", gsub("\\(","",review_cnt)))))
glimpse(wider_set)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt )
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% mutate(all_reviews= all_reviews_2 + "% of the " + review_cnt + " user reviews for this game are positive.")
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% mutate(all_reviews= all_reviews_2 + "% of the " + as.string(review_cnt) + " user reviews for this game are positive.")
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% mutate(all_reviews= as.string(all_reviews_2) + "% of the " + as.string(review_cnt) + " user reviews for this game are positive.")
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% mutate(all_reviews= paste(all_reviews_2, "% of the ",review_cnt, " user reviews for this game are positive."))
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
# polishing with respect to the initial style of the column, furthermore I drop the intermediate columns created by above 2 steps and the columns created while tidying the data as well
untidy_set <- untidy_set %>% mutate(all_reviews= paste(all_reviews_2, "% of the ",review_cnt, " user reviews for this game are positive.")) %>% select(-all_reviews_1, -all_reviews_2, -review_type, -review_cnt, -review_score)
glimpse(untidy_set)
untidy_set <- wider_set %>% unite(col="all_reviews_1", sep=",(", review_type, review_cnt , remove=FALSE)
glimpse(untidy_set)
untidy_set <- untidy_set %>% unite(col="all_reviews_2", sep="),- ", all_reviews_1, review_score , remove=FALSE)
glimpse(untidy_set)
# polishing with respect to the initial style of the column, furthermore I drop the intermediate columns created by above 2 steps and the columns created while tidying the data as well
untidy_set <- untidy_set %>% mutate(all_reviews= paste(all_reviews_2, "% of the ", review_cnt, " user reviews for this game are positive.")) %>% select(-all_reviews_1, -all_reviews_2, -review_type, -review_cnt, -review_score)
glimpse(untidy_set)
